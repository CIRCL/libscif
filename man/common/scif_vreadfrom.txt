// Copyright 2010-2013 Intel Corporation.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, version 2.1.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// Disclaimer: The codes contained in these modules may be specific
// to the Intel Software Development Platform codenamed Knights Ferry,
// and the Intel product codenamed Knights Corner, and are not backward
// compatible with other Intel products. Additionally, Intel will NOT
// support the codes or instruction set in future products.
//
// Intel offers no warranty of any kind regarding the code. This code is
// licensed on an "AS IS" basis and Intel is not obligated to provide
// any support, assistance, installation, training, or other services
// of any kind. Intel is also not obligated to provide any updates,
// enhancements or extensions. Intel specifically disclaims any warranty
// of merchantability, non-infringement, fitness for any particular
// purpose, and any other warranty.
//
// Further, Intel disclaims all liability of any kind, including but
// not limited to liability for infringement of any proprietary rights,
// relating to the use of the code, even if Intel is notified of the
// possibility of such liability. Except as expressly stated in an Intel
// license agreement provided with this code and agreed upon with Intel,
// no license, express or implied, by estoppel or otherwise, to any
// intellectual property rights is granted herein.
ifdef::scif_user[SCIF_VREADFROM(3)]
ifndef::scif_user[SCIF_VREADFROM(9)]
=================
:doctype: manpage

NAME
----
scif_vreadfrom - Copy from a remote address space.

SYNOPSIS
--------
*#include <scif.h>*

*int scif_vreadfrom(scif_epd_t* 'epd'*, void* \*'addr'*, size_t* 'len'*, off_t* 'offset'*,
int* 'rma_flags'*);*

DESCRIPTION
-----------
*scif_vreadfrom*() copies 'len' bytes from the remote registered address
space of the peer of endpoint 'epd', starting at the 'offset' 'roffset', to local
memory, starting at 'addr'. 'addr' is interpreted as a user space address.

The specified range ['roffset','roffset'+'len'-1] must be within some registered
window or windows of the remote nodes respectively. The range may intersect
multiple registered windows, but only if those windows are contiguous in the
registered address space.

If 'rma_flags' includes *SCIF_RMA_USECPU*, then the data is copied using
programmed read/writes. Otherwise the data is copied using DMA. If 'rma_flags'
includes *SCIF_RMA_SYNC*, then *scif_vreadfrom*() will return after the
transfer is complete. Otherwise, the transfer may be performed
asynchronously. The order in which any two asynchronous RMA operations complete
is non-deterministic. The synchronization functions, *scif_fence_mark*()/*scif_fence_wait*()
and *scif_fence_signal*(), can be used to synchronize to
the completion of asynchronous RMA operations.

The DMA transfer of individual bytes is not guaranteed to complete in
address order. If 'rma_flags' includes *SCIF_RMA_ORDERED*, then the last
cacheline or partial cacheline of the source range will become visible on
the destination node after all other transferred data in the source
range has become visible on the destination node.

If 'rma_flags' includes *SCIF_RMA_USECACHE*, then the physical pages which back
the specified local memory range may remain in a pinned state even after
the specified transfer completes. This may reduce overhead if some or all of
the same virtual address range is referenced in a subsequent call of
*scif_vreadfrom*() or *scif_vwriteto*().

The optimal DMA performance will likely be realized if both
'loffset' and 'roffset' are cacheline aligned (are a multiple of 64). Lower
performance will likely be realized if 'loffset' and 'roffset' are not
cacheline aligned but are separated by some multiple of 64. The lowest level
of performance is likely if 'loffset' and 'roffset' are not separated by a
multiple of 64.

The 'rma_flags' argument is formed by ORing together zero or more of the
following values:

*SCIF_RMA_USECPU*::
    perform the transfer using the CPU, otherwise use the DMA engine.
*SCIF_RMA_USECACHE*::
    enable registration caching
*SCIF_RMA_SYNC*::
    perform the transfer synchronously, returning after the
        transfer has completed. Passing this flag might result in
        the API busy-waiting and consuming CPU cycles while the DMA
        transfer is in progress.
*SCIF_RMA_ORDERED*::
    ensure that the last cacheline or partial cacheline of
        the source range becomes visible on the destination node
        after all other transferred data in the source range has
        become visible on the destination

RETURN VALUE
------------
Upon successful completion, *scif_vreadfrom*() returns 0; otherwise: in user
mode -1 is returned and errno is set to indicate the error; in kernel mode
the negative of one of the following errors is returned.

ERRORS
------
*EACCESS*::
 Attempt to write to a read-only range or read from a write-only range.
*EBADF*::
 'epd' is not a valid endpoint descriptor.
*ECONNRESET
 A connection was forcibly closed by a peer.
*EFAULT*::
 Addresses in the range ['addr','addr'+'len'-1] are invalid.
*EINVAL*::
 'epd' is not a valid endpoint descriptor, or
 'rma_flags' is invalid.
*ENODEV*::
 The remote node is lost.
*ENOTCONN*::
 The endpoint is not connected.
*ENOTTY*::
 'epd' is not a valid endpoint descriptor.
*ENXIO*::
 Addresses in the range ['roffset','roffset'+'len'-1] are invalid for the
  registered address space of 'epd'.

NOTES
-----
*scif_vreadfrom*() is available in both the user mode and kernel mode SCIF libraries.

SEE ALSO
--------
*scif_readfrom*(3), *scif_writeto*(3), *scif_vwriteto*(3), *scif_fence_mark*(3), *scif_fence_wait*(3), *scif_fence_signal*(3), *<scif.h>*

