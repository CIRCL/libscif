// Copyright 2010-2013 Intel Corporation.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, version 2.1.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// Disclaimer: The codes contained in these modules may be specific
// to the Intel Software Development Platform codenamed Knights Ferry,
// and the Intel product codenamed Knights Corner, and are not backward
// compatible with other Intel products. Additionally, Intel will NOT
// support the codes or instruction set in future products.
//
// Intel offers no warranty of any kind regarding the code. This code is
// licensed on an "AS IS" basis and Intel is not obligated to provide
// any support, assistance, installation, training, or other services
// of any kind. Intel is also not obligated to provide any updates,
// enhancements or extensions. Intel specifically disclaims any warranty
// of merchantability, non-infringement, fitness for any particular
// purpose, and any other warranty.
//
// Further, Intel disclaims all liability of any kind, including but
// not limited to liability for infringement of any proprietary rights,
// relating to the use of the code, even if Intel is notified of the
// possibility of such liability. Except as expressly stated in an Intel
// license agreement provided with this code and agreed upon with Intel,
// no license, express or implied, by estoppel or otherwise, to any
// intellectual property rights is granted herein.
ifdef::scif_user[SCIF_CONNECT(3)]
ifndef::scif_user[SCIF_CONNECT(9)]
===============
:doctype: manpage

NAME
----
scif_connect - Initiate a connection on a port.

SYNOPSIS
--------
*#include <scif.h>*

*int scif_connect(scif_epd_t* 'epd'*, struct scif_portID **'dst'*);*

DESCRIPTION
-----------
The *scif_connect*() function requests the connection of endpoint 'epd' to remote
port 'dst'. If the connection is successful, a peer endpoint, bound to 'dst', is
created on node dst.node. On successful return, the connection is complete.

If the endpoint 'epd' has not already been bound to a port, *scif_connect*()
will bind it to an unused local port.

A connection is terminated when an endpoint of the connection is closed,
either explicitly by *scif_close*(), or when a process that owns one of the
endpoints of a connection is terminated.

RETURN VALUE
------------
Upon successful completion, *scif_connect*() returns the port ID to which the
endpoint, 'epd', is bound; otherwise: in user mode -1 is returned and errno is
set to indicate the error; in kernel mode the negative of one of the
following errors is returned.

ERRORS
------
*EBADF*::
 'epd' is not a valid endpoint descriptor.
*ECONNREFUSED*::
 The destination was not listening for connections or refused the
 connection request.
*EINTR*::
 Interrupted function.
*EINVAL*::
 'epd' is not a valid endpoint descriptor, or
 dst.port is not a valid port ID.
*EISCONN*::
 The endpoint is already connected.
*ENOBUFS*::
 No buffer space is available.
*ENODEV*::
 The destination node does not exist, or
 The node is lost.
*ENOSPC*::
 No port number available for assignment (when pn==0).
*ENOTTY*::
 'epd' is not a valid endpoint descriptor.
*EOPNOTSUPP*::
 The endpoint is listening and cannot be connected.

EXAMPLE
-------
None

NOTES
-----
*scif_connect*() is available in both the user mode and kernel mode SCIF libraries.

SEE ALSO
--------
*scif_open*(), *scif_bind*(3), *scif_listen*(3), *scif_accept*(3), *scif_close*(3), *<scif.h>*

