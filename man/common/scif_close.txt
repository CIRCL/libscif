// Copyright 2010-2013 Intel Corporation.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, version 2.1.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// Disclaimer: The codes contained in these modules may be specific
// to the Intel Software Development Platform codenamed Knights Ferry,
// and the Intel product codenamed Knights Corner, and are not backward
// compatible with other Intel products. Additionally, Intel will NOT
// support the codes or instruction set in future products.
//
// Intel offers no warranty of any kind regarding the code. This code is
// licensed on an "AS IS" basis and Intel is not obligated to provide
// any support, assistance, installation, training, or other services
// of any kind. Intel is also not obligated to provide any updates,
// enhancements or extensions. Intel specifically disclaims any warranty
// of merchantability, non-infringement, fitness for any particular
// purpose, and any other warranty.
//
// Further, Intel disclaims all liability of any kind, including but
// not limited to liability for infringement of any proprietary rights,
// relating to the use of the code, even if Intel is notified of the
// possibility of such liability. Except as expressly stated in an Intel
// license agreement provided with this code and agreed upon with Intel,
// no license, express or implied, by estoppel or otherwise, to any
// intellectual property rights is granted herein.
ifdef::scif_user[SCIF_CLOSE(3)]
ifndef::scif_user[SCIF_CLOSE(9)]
=============
:doctype: manpage

NAME
----
scif_close - Close an endpoint.

SYNOPSIS
--------
*#include <scif.h>*

*int scif_close(scif_epd_t* 'epd'*)*;

DESCRIPTION
-----------
*scif_close*() closes an endpoint and performs necessary teardown of
facilities associated with that endpoint.

If 'epd' is a listening endpoint, then it will no longer accept connection
requests on the port to which it is bound. Any pending connection requests
are rejected.

If 'epd' is a connected endpoint, then its peer endpoint is also closed. RMAs
which are in-process through 'epd' or its peer endpoint will complete before
*scif_close*() returns. Registered windows of the local and peer endpoints are
released as if scif_unregister() was called against each window.

Closing an endpoint does not affect mappings to remote memory. These remain
until explicitly removed by calling scif_munmap().

If the peer endpoint's receive queue is not empty at the time that 'epd' is
closed, then the peer endpoint can be passed as the endpoint parameter to
scif_recv() until the receive queue is empty.

If 'epd' is bound to a port, then the port is returned to the pool of
available ports.

'epd' is freed and may no longer be accessed.

RETURN VALUE
------------
Upon successful completion, *scif_close*() returns 0; otherwise: in user mode
-1 is returned and errno is set to indicate the error; in kernel mode the
negative of one of the following errors is returned.

ERRORS
------
*EBADF*::
 'epd' is not a valid endpoint descriptor.

*EINVAL*::
 'epd' is not a valid endpoint descriptor.

NOTES
-----
*scif_close*() is available in both the user mode and kernel mode SCIF libraries.

SEE ALSO
--------
*scif_open*(), *scif_bind*(3), *scif_listen*(3), *scif_connect*(3), *scif_accept*(3), *<scif.h>*

