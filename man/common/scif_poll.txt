// Copyright 2010-2013 Intel Corporation.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, version 2.1.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// Disclaimer: The codes contained in these modules may be specific
// to the Intel Software Development Platform codenamed Knights Ferry,
// and the Intel product codenamed Knights Corner, and are not backward
// compatible with other Intel products. Additionally, Intel will NOT
// support the codes or instruction set in future products.
//
// Intel offers no warranty of any kind regarding the code. This code is
// licensed on an "AS IS" basis and Intel is not obligated to provide
// any support, assistance, installation, training, or other services
// of any kind. Intel is also not obligated to provide any updates,
// enhancements or extensions. Intel specifically disclaims any warranty
// of merchantability, non-infringement, fitness for any particular
// purpose, and any other warranty.
//
// Further, Intel disclaims all liability of any kind, including but
// not limited to liability for infringement of any proprietary rights,
// relating to the use of the code, even if Intel is notified of the
// possibility of such liability. Except as expressly stated in an Intel
// license agreement provided with this code and agreed upon with Intel,
// no license, express or implied, by estoppel or otherwise, to any
// intellectual property rights is granted herein.
ifdef::scif_user[SCIF_POLL(3)]
ifndef::scif_user[SCIF_POLL(9)]
============
:doctype: manpage

NAME
----
scif_poll - Wait for some event on an endpoint.

SYNOPSIS
--------
*#include <scif.h>*

*int
scif_poll(
    struct scif_pollepd* \*'epds'*,
    unsigned int* 'nepds'*,
    long* 'timeout'*);*

DESCRIPTION
-----------
*scif_poll*() waits for one of a set of endpoints to become ready to perform
an I/O operation. *scif_poll*() exposes a subset of the functionality of the
POSIX standard *poll*() function.

The 'epds' argument specifies the endpoint descriptors to be examined and the
events of interest for each endpoint descriptor. 'epds' is a pointer to an
array with one member for each open endpoint descriptor of interest.

The number of items in the 'epds' array is specified in 'nepds'. The 'epd' field
of 'scif_pollepd' is an endpoint descriptor of an open endpoint. The field
events is a bitmask specifying the events which the application is
interested in. The field 'revents' is an output parameter, filled by the
kernel with the events that actually occurred. The bits returned in 'revents'
can include any of those specified in events, or one of the values
*SCIF_POLLERR*, *SCIF_POLLHUP*, or *SCIF_POLLNVAL*. (These three bits are
meaningless in the 'events' field, and will be set in the 'revents' field
whenever the corresponding condition is true.)

If none of the events requested (and no error) has occurred for any of the
endpoint descriptors, then *scif_poll*() blocks until one of the events occurs.

The 'timeout' argument specifies an upper limit on the time for which
*scif_poll*() will block, in milliseconds. Specifying a negative value in
'timeout' indicates an infinite 'timeout'.

The following bits may be set in events and returned in revents:

*SCIF_POLLIN*::
Data may be received without blocking. For a connected
endpoint, this means that *scif_recv*() may be called without blocking. For a
listening endpoint, this means that *scif_accept*() may be called without
blocking.
*SCIF_POLLOUT*::
Data may be sent without blocking. For a connected endpoint,
this means that *scif_send*() may be called without blocking. This bit value
has no meaning for a listening endpoint and is ignored if specified.

The following bits are only returned in revents, and are ignored if set in
events:

*SCIF_POLLERR*::
An error occurred on the endpoint.
*SCIF_POLLHUP*::
The connection to the peer endpoint was disconnected.
*SCIF_POLLNVAL*::
The specified endpoint descriptor is invalid.

RETURN VALUE
------------
Upon successful completion, *scif_poll*() returns a non-negative value. A
positive value indicates the total number of endpoint descriptors that have
been selected (that is, endpoint descriptors for which the 'revents' member is
non-zero. A value of 0 indicates that the call timed out and no endpoint
descriptors have been selected. Otherwise: in user mode -1 is returned and
errno is set to indicate the error; in kernel mode the negative of one of
the following errors is returned.

ERRORS
------
*EFAULT*::
 The array given as argument was not contained in the calling program's
  address space.
*EINTR*::
 A signal occurred before any requested event.
*EINVAL*::
 The 'nepds' argument is greater than {OPEN_MAX}.
*ENOMEM*::
 There was no space to allocate file descriptor tables.

NOTES
-----
*scif_poll*() is available in both the user mode and kernel mode SCIF libraries.

SEE ALSO
--------
*poll*(2), *<scif.h>*

